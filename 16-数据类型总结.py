
"""
    整数、浮点数、布尔数据类型，见名知意，操作简单，这里主要总结：字符串、列表、元组、字典、集合



    数据类型            格式                          声明空容器      声明单元素容器        是否可变数据类型     是否有下标    是否可切片     是否有序     是否允许元素重复
    字符串       使用一对单引号或者双引号              '' 或者str()         'a'                 不可变          存在         可切片         有序          允许
    列表        使用一对中括号，元素之间使用逗号隔开     [] 或者list()        ['a']               可变            存在         可切片         有序          允许
    元组        使用一对小括号，元素之间使用逗号隔开     () 或者tuple()      ('a', )              不可变           存在         可切片         有序          允许

    字典        使用一对大括号，元素之间使用逗号隔开
                元素是键值对，键值对使用冒号隔开       {} 或者dict()      {'age':20}             可变           不存在        不可切片        无序         不允许key重复

    集合        使用一对大括号，元素之间使用逗号隔开        set()          {'a'}                  可变           不存在        不可切片        无序         不允许

    上述五个数据类型相互转换：
        - 字符串：
            字符串转列表  ------ list(字符串)
            字符串转元组  ------ tuple(字符串)
            字符串转字典  ------ 无
            字符串转集合  ------ set(字符串)   注意：会去重

        - 列表：
            列表转字符串  ------ ''.join(列表)
            列表转元组  ------ tuple(列表)
            列表转字典  ------ 无
            列表转集合  ------ set(列表)   注意：会去重

        - 元组：
            元组转字符串  ------ ''.join(元组)
            元组转列表  ------ list(元组)
            元组转字典  ------ 无
            元组转集合  ------ set(元组)   注意：会去重

        - 字典：
            字典转字符串  ------无
            字典转元组  ------ 无  字典使用 items()可以将键值对转成一个个元组
            字典转列表  ------ 无  字典使用 keys() 和 values 可以将键、值 转成列表
            字典转集合  ------ 无

        - 集合：
            集合转列表  ------ list(集合)
            集合转元组  ------ tuple(集合)
            集合转字典  ------ 无
            集合转字符串  ------ 无

    切片：
        存在下标的数据类型都可以切片，且用法相同

    常用函数
        1. 查：
            根据下标查询元素：
                - 字符串：
                    字符串名[下标]
                - 列表
                    列表名[下标]
                - 元组
                    元组名[下标]
                - 字典
                    无
                - 集合
                    无
            根据元素查询下标：
                - 字符串：
                    1. find(元素)
                    2. rfind(元素)
                    3. index(元素)
                    4. rindex(元素)
                - 列表：
                    1. index(元素)
                - 元组：
                    1. index(元素)
                - 字典：
                    1. get(key)
                - 集合：
                    无
        2. 增：
            - 字符串：
                无
            - 列表：
                1. append(元素)
                2. extend(序列)
                3. insert(下标, 元素)
            - 元组：
                无
            - 字典：
                1. 字典名[key] = value   其中key在原字典里不存在
            - 集合：
                1. add(元素)
                2. update(序列)
        3. 删：
            - 字符串：
                1. strip()  删除两端空格
                2. rtrip()  删除两端右侧空格
                3. ltrip()  删除两端左侧空格
            - 列表：
                1. pop() 删除最后一个元素，或者指定下标
                2. remove(元素)
                3. clear() 清空
            - 元组：
                无
            - 字典：
                无
            - 集合：
                1. remove(元素)
                2. pop() 随机删除
                3. discard(元素)
        4. 改：
            - 字符串：
                1. replace('目标子字符串', '新子字符串') 替换
                2. join(序列) 生成字符串
                3. split(分隔符)  分割成列表，分隔符丢弃，可指定分割次数
                4. capitalize()  字符串里第一个单词首字母大写，其它均小写
                5. title()        字符串每个单词首字母大写，其它维持不变
                6. upper()        字符串所有字符转成大写
                7. lower()        字符串所有字符转成小写
                8. ljust(长度)        字符串左对齐，不足右侧补空格，可指定补充字符
                9. rjust(长度)        字符串右对齐，不足左侧补空格，可指定补充字符
                10. center(长度)      字符串两端对齐，不足两端补空格，可指定补充字符
            - 列表：
                1. 列表名[下标] = 值
                2. reverse()  列表原地反转
                3. sort(reverse=False) 列表原地排序，升序   reverse=True降序
            - 元组：
                无
            - 字典：
                1. 字典名[key] = value   其中key在原字典里存在
            - 集合：
                无

        共有方法：
            判断元素是否存在：
                1. in
                2. not in

            返回长度：
                len()
            删除：
                del   del可以直接删除遍历   del 字符串名  则整个字符串被删除，变量名也被删除， 也可以删除单个元素
                                                    例如： 删除列表某个元素 del 列表名[下标]
                                                          删除字典元素    del 字典名[key]
            最大值和最小值：
                max()
                min()
                字符串每个字符其实对应一个数字，当对字符串使用max或者min会返回最大值字符串

            遍历：
                for都可以遍历
                while不能遍历集合
                注意：字典是分开遍历

                另外如果使用for循环遍历的同时还输出对应的下标，可以使用enumerate(序列)包裹
                for index, item in enumerate(列表):
                    ...

            统计元素出现次数
                count(元素)

            清空元素：
                clear()

            算术运算：
                加法：集合没有加法
                数乘：集合和字典没有乘法

        字符串特有方法：
            1. startswith(prefix, start=None, end=None) 判断字符串是否以子字符串prefix开头，也可以使用start，end指定判断起始和结束位置
            2. endswith(suffix, start=None, end=None) 和startswith函数同理，不过是判断是否以给定的子字符串结尾
            3. isalpha()：如果字符串⾄少有⼀个字符并且所有字符都是字⺟则返回 True, 否则返回 False。
            4. isdigit()：如果字符串只包含数字则返回 True 否则返回 False。
            5. isalnum()：如果字符串⾄少有⼀个字符并且所有字符都是字⺟或数字则返 回 True,否则返回False。
            6. isspace()：如果字符串中只包含空⽩，则返回 True，否则返回 False。
        列表特有方法：
            无
        元组特有方法：
            无
        字典特有方法：
            1. keys() 返回key的列表
            2. values() 返回value组成的列表
            3. items() 返回键值对列表
        集合特有方法：
            1. 并   |   union()
            2. 交   &   intersection()
            3. 差   -   difference()


    记忆：
        - 不可变数据类型 都没有增删改，字符串由于经常使用，所以定义了增删改操作，但都是生成新字符串
        - 有下标，就是有序，就可以切片，就可以根据下标查找元素  序列名[下标]
        - 序列都可以得到其长度， len()
        - 序列都可以使用 in 和 not in 判断
        - 序列都可以使用del 删除，不过不可变数据类型，只能删除整个序列，可变数据类型可以根据下标删除
        - 序列可以统计某个元素出现的次数 count(元素)
        - 可变数据类型 都可以使用 clear() 清空元素
        - 序列存在下标 则既可以根据下标查找，也可以根据元素查找
        - 序列有下标 都可以使用 index(元素) 查找
        - 序列可变，且有下标，都可以使用 序列名[下标]=值  修改
        - 序列可以获得最大值元素和最小值元素 max() min()
        - 可变序列增加元素，肯定存在两种增加方法，1.增加一个元素 2.增加一个序列

        1. 字符串：不可变，有序
            切片：√
            增：无
            删：只能删除左右空格 strip()
            查：有下标，所以存在两种查法：
                - 根据下标查元素  √
                - 根据元素查找    find(元素) rfind(元素) index(元素)
            改：
                - 大小写转换
                - 子字符串替换 replace()
                - 元素拼接 join()
                - 对齐
                - 判断内容
        2. 列表：可变，有序
            切片：√
            增：append()  extend()  insert()
            删：pop() remove()
            查：index() 列表名[下标]
            改：√  reverse() 反转   sort()排序
        3. 元组：不可变，有序
            切片：√
            增：无
            删：√
            查：√
            改：无
        4. 字典：无序，无下标，Key不重复
            切片：无
            增：字典名[不存在key] = 值
            删：√
            查：字典名[key]  get(key) keys() values() items()
            改：字典名[存在key] = 值
        5. 集合：无序、无下标，不重复
            切片：无
            增：add() update()
            删：remove() pop() discard()
            查：无
            改：无

        然后一些特有方法，记忆一下

    推导式：
        1. 列表推导式：
            ⽤⼀个表达式创建⼀个有规律的列表或控制⼀个有规律列表。
            例1：生成一个1-10得列表（不使用range()函数直接生成）
            正常情况：
            list1 = []
            for num in range(1, 11):
                list1.append(num)
            print(list1)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

            使用列表推导式：
            list2 = [num for num in range(1, 11)]
            print(list2)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

            例2：生成1-100之类得偶数列表
            list3 = []
            for num in range(1, 101):
                if num % 2 == 0:
                    list3.append(num)
            print(list3)  # [2, 4, 6, 8, 10, 12,...,100]

            使用列表推导式：
            list4 = [num for num in range(1, 101) if num % 2 == 0]
            print(list4)  # [2, 4, 6, 8, 10, 12,...,100]

            使用规则：目的是生成一个列表：
                如果使用for循环生成列表，发现for循环里只有简单得一条语句就可以使用列表推导式
                一条语句：
                    例如 list1.append(num)这是一条语句
                    如果有if这样得判断，此时需要查看if里面是否是一条语句，是的话就可以
                    因此如果 for 后 if 再 if 也行
                    或者 for 后 跟 for
                    只要保证一条语句就行：
                    list5 = [(i, j) for i in range(1, 3) for j in range(3)]

                    其实也可以这样看，代码是阶梯型就可以
                    for
                        for
                            if
                                ...
                    下面这样就不行
                    for
                        for
                        if
                    因为for和if同级了，是两条语句
        2. 字典推导式：
            主要用于将两个字典合并生成一个字典
        个人感觉列表推导式相比于字典推导式使用频率更加频繁，这里就不介绍字典推导式


"""

list1 = []
for num in range(1, 11):
    list1.append(num)
print(list1)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

list2 = [num for num in range(1, 11)]
print(list2)


list3 = []
for num in range(1, 101):
    if num % 2 == 0:
        list3.append(num)
print(list3)  # [2, 4, 6, 8, 10, 12,...,100]

list4 = [num for num in range(1, 101) if num % 2 == 0]
print(list4)  # [2, 4, 6, 8, 10, 12,...,100]
