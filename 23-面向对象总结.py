"""
    1. python中一切皆对象，int float等数字都是对象
    2. 声明一个类：使用 class 关键字，类名 需要遵守大驼峰命名方式
    3. python中的类都是直接或者间接继承于object类，object类是所有类的父类
    4. 通过类可以创建对象：对象名 = 类名([参数]) 如果创建对象需要传递参数，则必须传递参数， 对象名 遵守小驼峰命名
    5. 类本身也是一个对象，为了区分，可以称为 类对象，通过类可以创建对象，而类对象是python通过type类进行创建的，type类也可以自己创建自己类对象，object类也是type类创建的，同理type类也继承于object类
    6. 类中可以拥有属性（变量）和方法（函数）
    7. 属性可以分为：类属性、实例属性
        - 类属性：属于类，必须在类中赋值，由此类创建的对象都拥有其相同值的类属性，对象只能获取类属性，不能修改类属性。
            用对象修改类属性，相当于在对象里声明了一个和类属性同名的实例属性，类属性建议使用 类名.类属性访问
            类属性声明方式：
                class A:
                    age = 10
        - 实例属性：属于每个对象，实例属性可以在创建对象时进行赋值，因此每个对象可以拥有不同值的属性，实例属性需要使用 对象名.属性访问
            实例属性声明方式：
                class A:
                    def __init__(self, age):
                        self.age=age
            实例属性声明必须在__init__方法里，使用self.属性名 进行声明
    8.  方法可以分为：静态方法、类方法、实例方法
        - 静态方法：即不属于类也不属于实例，调用方式：可以使用 类名.静态方法   也可以  对象名.静态方法
            静态方法声明方式
                class A:
                    @staticmethod
                    def play(参数):
                        pass
            静态方法声明需要使用@staticmethod装饰器，参数可选， 静态方法调用方式 推荐使用 类名.静态方法
        - 类方法：和类属性相同，属于类，调用方式：可以使用 类名.类方法   也可以  对象名.类方法
            类方法声明方式
                class A:
                    @classmethod
                    def play(cls,参数):
                        pass
            类方法声明需要使用@classmethod装饰器，必须要有一个形参cls，并且是第一个形参（也可以是其它名字，但不建议）其它参数可选， 类方法调用方式 推荐使用 类名.类方法
            并且类方法的第一个参数，不需要调用方进行传递，python解释器会自动传递参数，调用方就当作形参cls不存在
        - 实例方法：和实例属性相同，属于实例，调用方式：对象名.类方法
            实例方法声明方式
                class A:
                    def play(self,参数):
                        pass
            实例方法必须要有一个形参self，并且是第一个形参（也可以是其它名字，但不建议）其它参数可选
            并且实例方法的第一个参数，不需要调用方进行传递，python解释器会自动传递参数，调用方就当作形参self不存在

    9. 三大特性之封装：
        - 创建类本身就是一种封装
        - 修改类中的属性和方法的权限 实现 访问封装
            1）：属性权限
                - 私有属性：使用两个下划线进行声明  __name  此时__name就是私有属性
                - 受保护属性：使用一个下划线进行声明 _name  此时_name就是受保护属性
                - 公有属性：属性名之前不添加任何下划线 name 此时name是公有属性
            2）：方法权限
                - 私有方法：使用两个下划线进行声明  __play()  此时__play()就是私有方法
                - 受保护方法：使用一个下划线进行声明 _play()  此时_play()就是受保护方法
                - 公有方法：属性名之前不添加任何下划线 play() 此时play()是公有方法
        - 访问权限：
            私有属性和私有方法只能在类中进行访问，也不能被继承
            受保护属性和方法可以在本类访问和在当前模块访问，以及子类中访问
        - 对于私有属性可以提供一些公开的方法进行访问
            如果想让对私有属性像公有属性那样直接 对象名.属性名 进行修改，可以选择下面之一技术
                1）使用@property装饰器
                    - 要求对属性的获取、修改、删除都提供和私有属性同名（不加下划线）的公有方法
                    - 在获取方法上增加装饰器@property
                    - 在修改方法上增加装饰器@属性名.setter
                    - 在删除方法上增加装饰器@属性名.delter
                2）使用property()属性
                    - 要求对属性的获取、修改、删除都提供公有方法
                    - 在类中直接使用 property(获取属性的方法名, 修改属性的方法名, 删除属性的方法名)

    10.三大特性之继承：
        - 多个类可以实现继承关系
        - A继承B 则A类称为子类，B称为父类
        - 子类可以拥有访问父类非私有的属性和方法的能力，有利于代码复用
        - 形式：
            1）单继承：一个类只有一个父类
                class B:
                    pass
                class A(B):
                    pass
            2) 多继承：一个类有多个父类
                class B:
                    pass
                class C:
                    pass
                class A(B,C):
                    pass
        - 当子类拥有与父类相同的属性或者方法，那么就近原则，子类对象只会调用子类的属性和方法
        - 子类访问父类属性和方法的顺序：遵循C3算法
        - 子类调用父类的方法：
            1）使用类名.方法名
            2）如果调用父类的__init__方法，则使用super().__init__()更为方便
        - 子类又和父类重名的方法称为：方法重写
        - 子类只有访问父类属性的权力，没有修改权力

    11. 三大特性之多态：
        - 多态是指允许对象在不同的情况下表现出不同的行为
        - 实现多态条件：
            1）有继承关系
            2）子类重写父类方法
        - 严格意义上python没有像其它语言那样的多态
        - 抽象类和抽象方法
            1）抽象类必须继承ABC类
            2）抽象方法：抽象方法没有方法体，并且需要@abstractmethod装饰器进行装饰
                class A(ABC):
                    @abstractmethod
                    def say(self):
                        pass
            3) 抽象类不能创建对象
            4）继承抽象类的子类必须重写抽象方法
        - 抽象类和抽象方法强制子类实现这些方法，实现接口的规范化

    12. 常见的内置属性：
        - __slots__ ：是一个列表，用来控制外界非法创建对象属性
        - __dict__ ：是一个字典，用来存储实例对象和类对象拥有的属性和方法
        - __class__ ：输出当前对象是由哪个类创建的
        - __module__ ：查看当前的对象在哪个模块里
    13. 常见的内置方法：
        - __str__ 和 __repr__ ：通过重写__str__方法，返回字符串，能直接打印对象，使得输出自定义的信息
        - __call__方法 ：通过重写这个方法能够实现此类的对象可以像函数一样直接 对象名(参数可选) 进行调用，调用会执行重写的__call__方法
        - 对象索引操作
            1. __setitem__  根据索引设置值
            2. __getitem__  根据索引获取值
            3. __delitem__  根据索引删除值
        - 切片操作：
            1. __setitem__  根据切片设置值
            2. __getitem__  根据切片获取值
            3. __delitem__  根据切片删除值
        - 比较操作：（自定义比较规则，使得对象可以进行比较）
            1. __eq__ 等于
            2. __ne__ 不等于
            3. __lt__ 小于
            4. __gt__ 大于
            5. __le__ 小于等于
            6. __ge__ 大于等于
            通过重写这些方法实现自定义对象比较，另外只需要重写相反的三对方法即可
        - 遍历操作：
            1. __getitem__ ： 重写这个方法，可以用于for遍历，需要在这个方法里给出终止条件，且终止条件需要抛出StopIteration异常，for循环遍历才可以停止，for每进行依次遍历就调用一次__getitem__方法
            2. 将类改成迭代器对象：
             - __iter__
             - __next__
             实现上述两个方法，则此类就是迭代器，可以使用for进行遍历，同理，需要在__next__给出终止条件，且终止条件需要抛出StopIteration异常，for循环遍历才可以停止，for每进行依次遍历就调用一次__next__方法
            若：__getitem__、__iter__、__next__同时重现，则__iter__、__next__优先级高于__getitem__，for循环会进入__next__
        - __new__ ： 用于创建对象时，给当前对象分配内存
        - __init__ ： 用于对象创建后，给对象属性进行赋值
        - __del__ ： 用于销毁对象
"""


