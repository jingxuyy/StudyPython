
"""
    在Python使用函数print()表示输出到控制台上

    print(self, *args, sep=' ', end='\n', file=None)

        - 1. *args 表示print函数可以输出多个内容，在之前的示例中一直输出一个字符串
            例如：
                print(1, 2, 3, 4)     ----->  1 2 3 4
                print('a', 'b', 'c')  ----->  a b c
        - 2. sep=' ' 表示print函数如果一次输出多个内容，则多个内容之间使用sep表示的符号进行隔开，默认一个空格，可以修改
            例如：
                print(1, 2, 3, 4)     ----->  1 2 3
                print(1, 2, 3, 4, sep='*')     ----->  1*2*3*4
        - 3. end='\n' 表示print函数输出过后以什么符号结尾，默认使用\n表示换行,可以修改
            例如：
                print('Python')
                print('Java')
                    --------> Python
                              Java
                print('Python', end='=')
                print('Java')
                    --------> Python=Java
        - 4. file=None 表示输出到控制台上，如果file指定到一个文件，则会将数据输出到文件中，等于写文件
"""

# 输出单个
print('A')

# 输出多个
print(1, 2, 3, 4)
print('a', 'b', 'c')

# 更改间隔符
print(1, 2, 3, 4, sep='*')

# 使用默认换行输出
print('Python')
print('Java')

# 更改结尾符号
print('Python', end='=')
print('Java')


"""
    print()函数的格式化输出：
        %s 字符串
        %d 有符号的⼗进制整数
        %f 浮点数
        %c 字符
        %u ⽆符号⼗进制整数
        %o ⼋进制整数
        %x ⼗六进制整数（⼩写ox）
        %X ⼗六进制整数（⼤写OX）
        %e 科学计数法（⼩写'e'）
        %E 科学计数法（⼤写'E'）
        %g %f和%e的简写
        %G %f和%E的简写
    基本格式：以字符串为例：
    sex = '男'
    print('性别为%s'%sex)
    
    %d 有符号的⼗进制整数: 如果是 %nd表示整数输出占n位，不足左侧补空格 
        例如：
            %4d 表示整数输出占4位不足，左侧补空格  print('%4d'%12) ----> 空格空格12
        特别的是：如果是 %0nd表示整数输出占n位，不足左侧补0
            print('%04d'%12)  -----> 0012
    
    %f 浮点数(广义上的小数)：使用%f输出小数默认保留6位小数，不足补0
        例如：
            print('%f'%12.3)   ---------> 12.300000
        可以使用 %.nf表示保留n位小数, n最小值为0，表示不保留小数 保留规则：Python式的四舍五入
        例如：
            print('%.2f'%12.3) ---------> 12.30
        当然也可以使用 %m.nf 表示输出，规则：
            n使用刚才规则，m表示整个小数占位总数，如果不足，左侧补空格，注意小数点也占用一位
    
    print()函数格式化输出，也可以输出多个参数，只要占位符和变量位置一一对应即可
        例如：
            print('第一个单词%s和第二个单词%s' % ('name', 'age'))
                    -----------> 第一个单词name和第二个单词age
    
    在Python可以使用%s格式化任意类型，也就是将任意类型转成字符串，会原样输出
    例如：
        print('格式化输入任意类型整数%s，小数%s，字符串%s' % (12, 0.39, 'str'))
                    -------------------> 格式化输入任意类型整数12，小数0.39，字符串str
    
    注意：
        f-格式化字符串是Python3.6中新增的格式化⽅法，该⽅法更简单易读, 也是将其它类型转成字符串输出
        形式： print(f'这里面是字符串{变量}')   变量使用{}括住即可
        print(f'我的名字是{name}, 明年{age + 1}岁了')
            -------------------> 我的名字是TOM，明年19岁了
    
    其它类型的格式化输出使用较少例如：%u %x %o 等等
    
    两个转义字符：
        \n  和 \t
        转义字符使用\加其它字母，表示当前字母被赋予了其它意思
        \n 换行
        \t 制表符
        
            
"""
age = 18
name = 'TOM'
weight = 75.5
student_id = 1
# 我的名字是TOM
print('我的名字是%s' % name)
# 我的学号是0001
print('我的学号是%04d' % student_id)
# 我的体重是75.50公⽄
print('我的体重是%.2f公⽄' % weight)
# 我的名字是TOM，今年18岁了
print('我的名字是%s，今年%d岁了' % (name, age))
# 我的名字是TOM，明年19岁了
print('我的名字是%s，明年%d岁了' % (name, age + 1))
# 我的名字是TOM，明年19岁了
print(f'我的名字是{name}, 明年{age + 1}岁了')

print('%04d' % 12)
print('%4d' % 12)
print('%f' % 12.3)
print('%.2f' % 12.3)
print('%4.2f' % 12.3)
print('%5.2f' % 12.3)
print('%6.2f' % 12.3)
print('第一个单词%s和第二个单词%s' % ('name', 'age'))

print('格式化输入任意类型整数%s，小数%s，字符串%s' % (12, 0.39, 'str'))
